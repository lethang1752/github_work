CREATE OR REPLACE TRIGGER SPNAPP_PRD.AFTER_LOGON_TRG
AFTER LOGON ON SPNAPP_PRD.SCHEMA
BEGIN
	EXECUTE IMMEDIATE  'ALTER SESSION SET current_schema=SPNADMIN_PRD';
END;
/

alter trigger SPNAPP_PRD.AFTER_LOGON_TRG compile;

CREATE OR REPLACE TRIGGER FCCREP.SPN_TRG_DDL_AUDIT_LOG
-- Change FCCREP to your schema name
    BEFORE DROP OR ALTER ON FCCREP.SCHEMA
DISABLE
DECLARE
  BEGIN
    IF DBMS_STANDARD.DICTIONARY_OBJ_TYPE IN
       ('PROCEDURE', 'VIEW', 'TABLE', 'FUNCTION', 'PACKAGE', 'PACKAGE BODY', 'TYPE') THEN

      -- Store old code in SOURCE_HIST table
      INSERT INTO SCHEMA_DDL_AUDIT VALUES(
             SYSDATE
             ,(SELECT SYS_CONTEXT( 'USERENV', 'CURRENT_USER' ) AS AA FROM DUAL)
             ,DBMS_STANDARD.DICTIONARY_OBJ_TYPE
             ,DBMS_STANDARD.DICTIONARY_OBJ_NAME
             ,DBMS_STANDARD.SYSEVENT
             ,(SELECT SYS_CONTEXT( 'USERENV', 'IP_ADDRESS' ) AS AA FROM DUAL)
             ,(SELECT SYS_CONTEXT( 'USERENV', 'HOST' ) AS AA FROM DUAL));
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20000, SQLERRM);
  END;
/

CREATE OR REPLACE TRIGGER FCCREP.SPN_TRG_CHANGING_AUDIT_LOG
-- CHANGE FCCREP TO YOUR SCHEMA NAME
    BEFORE CREATE ON FCCREP.SCHEMA
DISABLE
DECLARE
  BEGIN
    IF DBMS_STANDARD.DICTIONARY_OBJ_TYPE IN
       ('PROCEDURE', 'VIEW', 'FUNCTION', 'PACKAGE', 'PACKAGE BODY', 'TYPE') THEN

      -- STORE OLD CODE IN SOURCE_HIST TABLE
      INSERT INTO SPN_CHANGING_AUDIT_LOG
        SELECT (SELECT SYS_CONTEXT( 'USERENV', 'IP_ADDRESS' ) AS AA FROM DUAL)
               ,(SELECT SYS_CONTEXT( 'USERENV', 'HOST' ) AS AA FROM DUAL)
               ,SYSDATE
               ,USER_SOURCE.*
               ,DBMS_STANDARD.SYSEVENT
          FROM USER_SOURCE
         WHERE TYPE = DBMS_STANDARD.DICTIONARY_OBJ_TYPE
           AND NAME = DBMS_STANDARD.DICTIONARY_OBJ_NAME;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20000, SQLERRM);
  END;
/

alter table "SPNLIVE"."CLTB_ACCOUNT_EVENTS_DIARY" disable row movement;
alter table "SPNLIVE"."ICTM_ACC" disable row movement;
alter table "SPNLIVE"."PCTB_CONTRACT_MASTER" disable row movement;

CREATE OR REPLACE TRIGGER SPNLIVE.GWTR#_LOAN_BRN_TRFR BEFORE UPDATE OR INSERT ON "SPNLIVE"."CLTB_ACCOUNT_EVENTS_DIARY" FOR EACH ROW
WHEN (
NEW.EVENT_CODE='TRFR' AND NEW.EXECUTION_STATUS='P'
      )
DECLARE
    l_Operation   VARCHAR2(20);
    l_Pk_Cols     VARCHAR2(32767);
    l_Pk_Vals     VARCHAR2(32767);
    l_Column_list VARCHAR2(32767);
    l_Old_values  VARCHAR2(32767);
    l_New_values  VARCHAR2(32767);
    l_Rowid       VARCHAR2(32767);
    l_Notify      VARCHAR2(10) := 'Y';
BEGIN
l_Notify:= 'Y';
IF inserting THEN
l_Operation := 'INSERT';
ELSE
l_Operation := 'UPDATE';
END IF;
IF NVL(l_Notify,'N') = 'Y' THEN
l_Pk_Cols := 'ACCOUNT_NUMBER~BRANCH_CODE~EXECUTION_DATE~COMPONENT_NAME~EVENT_CODE~EVENT_SEQ_NO';
l_Pk_Vals := :New.ACCOUNT_NUMBER||'~'||:New.BRANCH_CODE||'~'|| To_Char(:New.EXECUTION_DATE,Cspks_Req_Global.g_date_format)||'~'||:New.COMPONENT_NAME||'~'||:New.EVENT_CODE||'~'||:New.EVENT_SEQ_NO;
l_RowId    := :New.Rowid;
Pr_Populate_Notification('CLTB_ACCOUNT_EVENTS_DIARY',
l_Pk_Cols,
l_Pk_Vals,
l_Operation,
l_RowId,
'NOTIF_CL_ACC_TRFR');
 END IF;
EXCEPTION
WHEN OTHERS THEN
Debug.Pr_Debug('ST','Failed in gwtr#_CSTM_PRODUCT. Error = ' || SQLERRM);
END GWTR#_LOAN_BRN_TRFR;

/
CREATE OR REPLACE TRIGGER SPNLIVE.GWTR#_ROLLOVER BEFORE UPDATE ON "SPNLIVE"."ICTM_ACC" FOR EACH ROW
WHEN (
/*NEW.int_start_date <> old.int_start_date AND*/ NEW.maturity_date  <> OLD.maturity_date
      )
DECLARE
    l_Operation   VARCHAR2(20);
    l_Pk_Cols     VARCHAR2(32767);
    l_Pk_Vals     VARCHAR2(32767);
    l_Column_list VARCHAR2(32767);
    l_Old_values  VARCHAR2(32767);
    l_New_values  VARCHAR2(32767);
    l_Rowid       VARCHAR2(32767);
    l_Notify      VARCHAR2(10) := 'Y';
	--l_segment_code VARCHAR2(32767);--9NT1501 FCPB Changes
	l_segment_code STTM_CUST_SEG_MAPPING.segment_code%type;--9NT1501 FCPB Changes
	l_segment_status STTM_CUST_SEG_MAPPING.Segment_Status%type;--9NT1501 FCPB Changes
BEGIN
Debug.Pr_Debug('ST','Inside this trigger GWTR#_ROLLOVER');

l_Notify:= 'Y';
IF inserting THEN
l_Operation := 'INSERT';
ELSE
l_Operation := 'UPDATE';
END IF;
--9NT1501 FCPB Changes starts
BEGIN
SELECT A.SEGMENT_CODE,A.SEGMENT_STATUS
into l_segment_code,l_segment_status
  FROM STTM_CUST_SEG_MAPPING A
 WHERE A.CUSTOMER_NO = (SELECT B.CUST_NO
                          FROM STTM_CUST_ACCOUNT B
                         WHERE B.BRANCH_CODE = :New.BRN
                           AND B.CUST_AC_NO = :New.ACC)
 AND AUTH_STAT='A'
 AND RECORD_STAT='O';
EXCEPTION
       WHEN No_Data_Found THEN
       Debug.Pr_Debug('ST','No data');
       l_segment_code:=NULL;
	   l_segment_status :=NULL;
END;
Debug.Pr_Debug('ST','l_segment_code-'||l_segment_code);
--9NT1501 FCPB Changes Ends
IF l_segment_code IS NOT NULL AND l_segment_status IS NOT NULL THEN --9NT1501 FCPB Changes
		IF NVL(l_Notify,'N') = 'Y' THEN
		--l_Pk_Cols := 'ACCOUNT_NUMBER~BRANCH_CODE';
		l_Pk_Cols := 'BRN~ACC';
		l_Pk_Vals := :New.BRN||'~'||:New.ACC;
		l_RowId    := :New.Rowid;
		Pr_Populate_Notification('ICVW_TD_ROLLOVER',
		l_Pk_Cols,
		l_Pk_Vals,
		l_Operation,
		l_RowId,
		'NOTIF_TD_ROLLOVER');
		 END IF;
END IF;--9NT1501 FCPB Changes
EXCEPTION
WHEN OTHERS THEN
Debug.Pr_Debug('ST','Failed in gwtr#_ROLLOVER. Error = ' || SQLERRM);
END GWTR#_ROLLOVER;
/

CREATE OR REPLACE TRIGGER SPNLIVE.GWTR#_TRG_PC_P2P_PYMREJ BEFORE UPDATE OR INSERT ON "SPNLIVE"."PCTB_CONTRACT_MASTER" FOR EACH ROW
WHEN (
new.CONTRACT_STATUS='X'
      )
DECLARE
    l_Operation   VARCHAR2(20);
    l_Pk_Cols     VARCHAR2(32767);
    l_Pk_Vals     VARCHAR2(32767);
    l_Column_list VARCHAR2(32767);
    l_Old_values  VARCHAR2(32767);
    l_New_values  VARCHAR2(32767);
    l_Rowid       VARCHAR2(32767);
    l_Notify      VARCHAR2(10) := 'Y';
BEGIN
l_Notify:= 'Y';
IF inserting THEN
l_Operation := 'INSERT';
ELSE
l_Operation := 'UPDATE';
END IF;
IF NVL(l_Notify,'N') = 'Y' THEN
l_Pk_Cols := 'CONTRACT_REF_NO';
l_Pk_Vals := :New.CONTRACT_REF_NO;
l_RowId    := :New.Rowid;
Pr_Populate_Notification('PCTB_CONTRACT_MASTER',
l_Pk_Cols,
l_Pk_Vals,
l_Operation,
l_RowId,
'NOTIF_PC_P2PREJ');
 END IF;
EXCEPTION
WHEN OTHERS THEN
Debug.Pr_Debug('ST','Failed in gwtr#_CSTM_PRODUCT. Error = ' || SQLERRM);
END GWTR#_TRG_PC_P2P_PYMREJ;
/

CREATE OR REPLACE TRIGGER SPNLIVE.GWTR#_TRG_PC_P2P_TRNSUCCES BEFORE UPDATE OR INSERT ON "SPNLIVE"."PCTB_CONTRACT_MASTER" FOR EACH ROW
WHEN (
old.CONTRACT_STATUS != new.CONTRACT_STATUS AND new.CONTRACT_STATUS='L' AND  'Y' NOT IN  (Nvl(new.Consol_Reqd, 'N'),Nvl(new.FILE_LEV_CUST_CONSOL_REQ, 'N'))
      )
DECLARE
    l_Operation   VARCHAR2(20);
    l_Pk_Cols     VARCHAR2(32767);
    l_Pk_Vals     VARCHAR2(32767);
    l_Column_list VARCHAR2(32767);
    l_Old_values  VARCHAR2(32767);
    l_New_values  VARCHAR2(32767);
    l_Rowid       VARCHAR2(32767);
    l_Notify      VARCHAR2(10) := 'Y';
BEGIN
l_Notify:= 'Y';
IF inserting THEN
l_Operation := 'INSERT';
ELSE
l_Operation := 'UPDATE';
END IF;
IF NVL(l_Notify,'N') = 'Y' THEN 
l_Pk_Cols := 'CONTRACT_REF_NO';
l_Pk_Vals := :New.CONTRACT_REF_NO;
l_RowId    := :New.Rowid;
Pr_Populate_Notification('PCTB_CONTRACT_MASTER',
l_Pk_Cols,
l_Pk_Vals,
l_Operation,
l_RowId,
'NOTIF_PC_PYSCS');
 END IF; 
EXCEPTION
WHEN OTHERS THEN
Debug.Pr_Debug('ST','Failed in gwtr#_CSTM_PRODUCT. Error = ' || SQLERRM);
END GWTR#_TRG_PC_P2P_TRNSUCCES;
/

alter trigger SPNLIVE.GWTR#_LOAN_BRN_TRFR compile;
alter trigger SPNLIVE.GWTR#_ROLLOVER compile;
alter trigger SPNLIVE.GWTR#_TRG_PC_P2P_PYMREJ compile;
alter trigger SPNLIVE.GWTR#_TRG_PC_P2P_TRNSUCCES  compile;

alter table "SPNLIVE"."CLTB_ACCOUNT_EVENTS_DIARY" enable row movement;
alter table "SPNLIVE"."ICTM_ACC" enable row movement;
alter table "SPNLIVE"."PCTB_CONTRACT_MASTER" enable row movement;

----Create missing table
CREATE TABLE SPNADMIN_PRD.USERPAGINATIONDATA
(
  ID_ENTITY  VARCHAR2(5 BYTE),
  IDUSER     VARCHAR2(20 BYTE),
  IDREQUEST  VARCHAR2(7 BYTE),
  XMLDATA    SYS.XMLTYPE,
  IDSESSION  VARCHAR2(50 BYTE),
  IDROW      NUMBER,
  SELECTED   CHAR(1 BYTE)
)
XMLTYPE XMLDATA STORE AS SECUREFILE BINARY XML (
  TABLESPACE  FCAT_PRD
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
ALLOW NONSCHEMA
DISALLOW ANYSCHEMA
TABLESPACE FCAT_PRD
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX SPNADMIN_PRD.IDX_USERPAGINATIONDATA_1 ON SPNADMIN_PRD.USERPAGINATIONDATA
(IDUSER, IDREQUEST)
LOGGING
TABLESPACE FCAT_PRD
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE SYNONYM FCDB01.USERPAGINATIONDATA FOR SPNADMIN_PRD.USERPAGINATIONDATA;
CREATE OR REPLACE SYNONYM FCDB02.USERPAGINATIONDATA FOR SPNADMIN_PRD.USERPAGINATIONDATA;
CREATE OR REPLACE SYNONYM FCDBREP.USERPAGINATIONDATA FOR SPNADMIN_PRD.USERPAGINATIONDATA;
CREATE OR REPLACE SYNONYM SPNB001_PRD.USERPAGINATIONDATA FOR SPNADMIN_PRD.USERPAGINATIONDATA;

ALTER TABLE SPNADMIN_PRD.USERPAGINATIONDATA ADD (
  CONSTRAINT C1_USERPAGINATIONDATA
  CHECK (   "ID_ENTITY" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C2_USERPAGINATIONDATA
  CHECK (   "IDUSER" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C3_USERPAGINATIONDATA
  CHECK (   "IDREQUEST" IS NOT NULL)
  ENABLE VALIDATE);

GRANT SELECT ON SPNADMIN_PRD.USERPAGINATIONDATA TO FCDB01;
GRANT SELECT ON SPNADMIN_PRD.USERPAGINATIONDATA TO FCDB02;
GRANT DELETE, INSERT, SELECT, UPDATE ON SPNADMIN_PRD.USERPAGINATIONDATA TO FCDBAPP_ROLE_PRD;
GRANT SELECT ON SPNADMIN_PRD.USERPAGINATIONDATA TO FCDBREP;
GRANT DELETE, INSERT, SELECT, UPDATE ON SPNADMIN_PRD.USERPAGINATIONDATA TO SPNB001_PRD;

CREATE TABLE SPNADMIN_PRD.REMITTANCEDETAILS
(
  ID_ENTITY        VARCHAR2(5 BYTE),
  REMITTANCE_TYPE  VARCHAR2(2 BYTE),
  REMITTANCE_CODE  VARCHAR2(4 BYTE),
  REMITTANCE_ITEM  VARCHAR2(255 BYTE),
  REMITTANCE_DESC  VARCHAR2(4000 BYTE),
  IDUDF            SYS.XMLTYPE,
  SPECIFY_OTHER    CHAR(1 BYTE)
)
XMLTYPE IDUDF STORE AS SECUREFILE BINARY XML (
  TABLESPACE  FCAT_PRD
  ENABLE      STORAGE IN ROW
  CHUNK       8192
  NOCACHE
  LOGGING
      STORAGE    (
                  INITIAL          104K
                  NEXT             1M
                  MINEXTENTS       1
                  MAXEXTENTS       UNLIMITED
                  PCTINCREASE      0
                  BUFFER_POOL      DEFAULT
                 ))
ALLOW NONSCHEMA
DISALLOW ANYSCHEMA
TABLESPACE FCAT_PRD
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE UNIQUE INDEX SPNADMIN_PRD.PK_REMITTANCEDETAILS ON SPNADMIN_PRD.REMITTANCEDETAILS
(ID_ENTITY, REMITTANCE_TYPE, REMITTANCE_CODE)
LOGGING
TABLESPACE FCAT_PRD
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE SYNONYM FCDB01.REMITTANCEDETAILS FOR SPNADMIN_PRD.REMITTANCEDETAILS;
CREATE OR REPLACE SYNONYM FCDB02.REMITTANCEDETAILS FOR SPNADMIN_PRD.REMITTANCEDETAILS;
CREATE OR REPLACE SYNONYM FCDBREP.REMITTANCEDETAILS FOR SPNADMIN_PRD.REMITTANCEDETAILS;
CREATE OR REPLACE SYNONYM SPNB001_PRD.REMITTANCEDETAILS FOR SPNADMIN_PRD.REMITTANCEDETAILS;
ALTER TABLE SPNADMIN_PRD.REMITTANCEDETAILS ADD (
  CONSTRAINT C1_REMITTANCEDETAILS
  CHECK (   "ID_ENTITY" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C2_REMITTANCEDETAILS
  CHECK (   "REMITTANCE_TYPE" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C3_REMITTANCEDETAILS
  CHECK (   "REMITTANCE_CODE" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C4_REMITTANCEDETAILS
  CHECK (   "REMITTANCE_ITEM" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT C5_REMITTANCEDETAILS
  CHECK (   "REMITTANCE_DESC" IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT PK_REMITTANCEDETAILS
  PRIMARY KEY
  (ID_ENTITY, REMITTANCE_TYPE, REMITTANCE_CODE)
  USING INDEX SPNADMIN_PRD.PK_REMITTANCEDETAILS
  ENABLE VALIDATE);
GRANT SELECT ON SPNADMIN_PRD.REMITTANCEDETAILS TO FCDB01;
GRANT SELECT ON SPNADMIN_PRD.REMITTANCEDETAILS TO FCDB02;
GRANT SELECT ON SPNADMIN_PRD.REMITTANCEDETAILS TO FCDBAPP_ROLE_PRD;
GRANT SELECT ON SPNADMIN_PRD.REMITTANCEDETAILS TO FCDBREP;
GRANT SELECT ON SPNADMIN_PRD.REMITTANCEDETAILS TO SPNB001_PRD;

---Create missing index
CREATE INDEX SPNLIVE.INDEX_BR ON FCCREP.SPN_OVERHEAD_DETAIL
(BACK_DATE, BRANCH_CODE, CUST_AC_NO)
LOGGING
TABLESPACE FCCDATALAR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1M
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
		   
CREATE INDEX SPNLIVE.INDEX_NORMAL ON FCCREP.SPN_GLBACK_DATE
(AC_BRANCH, GL_CODE, REPORT_TRN_DATE)
LOGGING
TABLESPACE FCCDATALAR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1M
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
		   
CREATE INDEX SPNLIVE.IX_T_CLTB_ACCOUNT_COMP ON SPNLIVE.CLTB_ACCOUNT_COMP_SCH_TMP
(BRANCH_CODE, ACCOUNT_NUMBER, COMPONENT_NAME);

CREATE INDEX SPNLIVE.PKGNOR ON FCCREP.SPN_OVERHEAD_CAL
(BACK_DATE, BRANCH_CODE)
LOGGING
TABLESPACE FCCDATALAR
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          1M
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

---Create missing public synonym
CREATE OR REPLACE PUBLIC SYNONYM "DBMS_SHARED_POOL" FOR "SYS"."DBMS_SHARED_POOL";
CREATE  PUBLIC SYNONYM "DBMS_DBLINK" for "SYS"."DBMS_DBLINK";
CREATE  PUBLIC SYNONYM "DMBGOS" for "SYS"."DMBGOS";
CREATE  PUBLIC SYNONYM "BLASTN_MATCH" for "SYS"."BLASTN_MATCH";
CREATE  PUBLIC SYNONYM "BLASTP_MATCH" for "SYS"."BLASTP_MATCH";
CREATE  PUBLIC SYNONYM "TBLAST_MATCH" for "SYS"."TBLAST_MATCH";
CREATE  PUBLIC SYNONYM "BLASTN_ALIGN" for "SYS"."BLASTN_ALIGN";
CREATE  PUBLIC SYNONYM "BLASTP_ALIGN" for "SYS"."BLASTP_ALIGN";
CREATE  PUBLIC SYNONYM "TBLAST_ALIGN" for "SYS"."TBLAST_ALIGN";
CREATE  PUBLIC SYNONYM "BLASTN_COMPRESS" for "SYS"."BLASTN_COMPRESS";
CREATE  PUBLIC SYNONYM "DBMS_RULE_COMPATIBLE_90" for "SYS"."DBMS_RULE_COMPATIBLE_90";
CREATE  PUBLIC SYNONYM "/bb478c31_SunJCE_ak" for "SYS"."/bb478c31_SunJCE_ak";
CREATE  PUBLIC SYNONYM "/6cbff28a_SunJCE_af" for "SYS"."/6cbff28a_SunJCE_af";
CREATE  PUBLIC SYNONYM "/e3b46633_SunJCE_ag" for "SYS"."/e3b46633_SunJCE_ag";
CREATE  PUBLIC SYNONYM "/e1da93b6_SunJCE_ah" for "SYS"."/e1da93b6_SunJCE_ah";
CREATE  PUBLIC SYNONYM "/f5416fcc_SunJCE_ai" for "SYS"."/f5416fcc_SunJCE_ai";
CREATE  PUBLIC SYNONYM "/1e536993_SunJCE_aj" for "SYS"."/1e536993_SunJCE_aj";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_o" for "SYS"."javax/crypto/SunJCE_o";
CREATE  PUBLIC SYNONYM "/1cf83277_SunJCE_am" for "SYS"."/1cf83277_SunJCE_am";
CREATE  PUBLIC SYNONYM "/18434a91_SunJCE_al" for "SYS"."/18434a91_SunJCE_al";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_r" for "SYS"."javax/crypto/SunJCE_r";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_t" for "SYS"."javax/crypto/SunJCE_t";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_s" for "SYS"."javax/crypto/SunJCE_s";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_p" for "SYS"."javax/crypto/SunJCE_p";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_q" for "SYS"."javax/crypto/SunJCE_q";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_n" for "SYS"."javax/crypto/SunJCE_n";
CREATE  PUBLIC SYNONYM "javax/crypto/SunJCE_m" for "SYS"."javax/crypto/SunJCE_m";
CREATE  PUBLIC SYNONYM "oracle/xdb/SoftHashMap$1" for "SYS"."oracle/xdb/SoftHashMap$1";
CREATE  PUBLIC SYNONYM "oracle/xdb/SoftHashMap$Entry" for "SYS"."oracle/xdb/SoftHashMap$Entry";
CREATE  PUBLIC SYNONYM "/3101dc9_SoftHashMapEntrySet1" for "SYS"."/3101dc9_SoftHashMapEntrySet1";
CREATE  PUBLIC SYNONYM "/683e4954_SoftHashMapEntrySet" for "SYS"."/683e4954_SoftHashMapEntrySet";
CREATE  PUBLIC SYNONYM "oracle/xdb/SoftHashMap$SoftKey" for "SYS"."oracle/xdb/SoftHashMap$SoftKey";
CREATE  PUBLIC SYNONYM "oracle/xdb/SoftHashMap" for "SYS"."oracle/xdb/SoftHashMap";
CREATE  PUBLIC SYNONYM "CWM_CLASSIFY" for "OLAPSYS"."CWM$CLASSIFY";
CREATE  PUBLIC SYNONYM "CWM_OLAP_CUBE" for "OLAPSYS"."CWM$OLAP$CUBE";
CREATE  PUBLIC SYNONYM "CWM_OLAP_HIERARCHY" for "OLAPSYS"."CWM$OLAP$HIERARCHY";
CREATE  PUBLIC SYNONYM "CWM_OLAP_LEVEL" for "OLAPSYS"."CWM$OLAP$LEVEL";
CREATE  PUBLIC SYNONYM "CWM_OLAP_MEASURE" for "OLAPSYS"."CWM$OLAP$MEASURE";
CREATE  PUBLIC SYNONYM "CWM_OLAP_LEVEL_ATTRIBUTE" for "OLAPSYS"."CWM$OLAP$LEVEL$ATTRIBUTE";
CREATE  PUBLIC SYNONYM "CWM_OLAP_DIM_ATTRIBUTE" for "OLAPSYS"."CWM$OLAP$DIM$ATTRIBUTE";
CREATE  PUBLIC SYNONYM "CWM_OLAP_DIMENSION" for "OLAPSYS"."CWM$OLAP$DIMENSION";
CREATE  PUBLIC SYNONYM "CWM_UTILITY" for "OLAPSYS"."CWM$UTILITY";
CREATE  PUBLIC SYNONYM "CWM_EXCEPTIONS" for "OLAPSYS"."CWM$EXCEPTIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CATALOG_ENTITY_USES" for "OLAPSYS"."DBA$OLAP_CATALOG_ENTITY_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CATALOGS" for "OLAPSYS"."DBA$OLAP_CATALOGS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_COLUMNS" for "OLAPSYS"."DBA$OLAP_COLUMNS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CUBE_DIM_USES" for "OLAPSYS"."DBA$OLAP_CUBE_DIM_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CUBE_MEASURE_DIM_USES" for "OLAPSYS"."DBA$OLAP_CUBE_MEASURE_DIM_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CUBE_MEASURE_MAPS" for "OLAPSYS"."DBA$OLAP_CUBE_MEASURE_MAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CUBE_MEASURES" for "OLAPSYS"."DBA$OLAP_CUBE_MEASURES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_CUBES" for "OLAPSYS"."DBA$OLAP_CUBES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DESCRIPTOR_TYPES" for "OLAPSYS"."DBA$OLAP_DESCRIPTOR_TYPES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DESCRIPTORS" for "OLAPSYS"."DBA$OLAP_DESCRIPTORS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_ATTRIBUTES" for "OLAPSYS"."DBA$OLAP_DIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_HIER_LEVEL_USES" for "OLAPSYS"."DBA$OLAP_DIM_HIER_LEVEL_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_HIERARCHIES" for "OLAPSYS"."DBA$OLAP_DIM_HIERARCHIES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_LEVEL_ATTR_MAPS" for "OLAPSYS"."DBA$OLAP_DIM_LEVEL_ATTR_MAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_LEVEL_ATTRIBUTES" for "OLAPSYS"."DBA$OLAP_DIM_LEVEL_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_LEVELS" for "OLAPSYS"."DBA$OLAP_DIM_LEVELS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIMENSIONS" for "OLAPSYS"."DBA$OLAP_DIMENSIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_ENTITY_DESC_USES" for "OLAPSYS"."DBA$OLAP_ENTITY_DESC_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FACT_LEVEL_USES" for "OLAPSYS"."DBA$OLAP_FACT_LEVEL_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FOREIGN_KEYS" for "OLAPSYS"."DBA$OLAP_FOREIGN_KEYS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FUNCTION_ARGUMENTS" for "OLAPSYS"."DBA$OLAP_FUNCTION_ARGUMENTS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FUNCTION_PARAMETERS" for "OLAPSYS"."DBA$OLAP_FUNCTION_PARAMETERS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FUNCTION_USAGES" for "OLAPSYS"."DBA$OLAP_FUNCTION_USAGES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_FUNCTIONS" for "OLAPSYS"."DBA$OLAP_FUNCTIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_JOIN_KEY_COLUMN_USES" for "OLAPSYS"."DBA$OLAP_JOIN_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_KEY_COLUMN_USES" for "OLAPSYS"."DBA$OLAP_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_KEYS" for "OLAPSYS"."DBA$OLAP_KEYS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_LEVEL_KEY_COLUMN_USES" for "OLAPSYS"."DBA$OLAP_LEVEL_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP_TABLES" for "OLAPSYS"."DBA$OLAP_TABLES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CATALOG_ENTITY_USES" for "OLAPSYS"."ALL$OLAP_CATALOG_ENTITY_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CATALOGS" for "OLAPSYS"."ALL$OLAP_CATALOGS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_COLUMNS" for "OLAPSYS"."ALL$OLAP_COLUMNS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CUBE_DIM_USES" for "OLAPSYS"."ALL$OLAP_CUBE_DIM_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CUBE_MEASURE_DIM_USES" for "OLAPSYS"."ALL$OLAP_CUBE_MEASURE_DIM_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CUBE_MEASURE_MAPS" for "OLAPSYS"."ALL$OLAP_CUBE_MEASURE_MAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CUBE_MEASURES" for "OLAPSYS"."ALL$OLAP_CUBE_MEASURES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_CUBES" for "OLAPSYS"."ALL$OLAP_CUBES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DESCRIPTOR_TYPES" for "OLAPSYS"."ALL$OLAP_DESCRIPTOR_TYPES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DESCRIPTORS" for "OLAPSYS"."ALL$OLAP_DESCRIPTORS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_ATTR_USES" for "OLAPSYS"."ALL$OLAP_DIM_ATTR_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_ATTRIBUTES" for "OLAPSYS"."ALL$OLAP_DIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_HIER_LEVEL_USES" for "OLAPSYS"."ALL$OLAP_DIM_HIER_LEVEL_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_HIERARCHIES" for "OLAPSYS"."ALL$OLAP_DIM_HIERARCHIES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_LEVEL_ATTR_MAPS" for "OLAPSYS"."ALL$OLAP_DIM_LEVEL_ATTR_MAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_LEVEL_ATTRIBUTES" for "OLAPSYS"."ALL$OLAP_DIM_LEVEL_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIM_LEVELS" for "OLAPSYS"."ALL$OLAP_DIM_LEVELS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_DIMENSIONS" for "OLAPSYS"."ALL$OLAP_DIMENSIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_ENTITY_DESC_USES" for "OLAPSYS"."ALL$OLAP_ENTITY_DESC_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FACT_LEVEL_USES" for "OLAPSYS"."ALL$OLAP_FACT_LEVEL_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FOREIGN_KEYS" for "OLAPSYS"."ALL$OLAP_FOREIGN_KEYS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FUNCTION_ARGUMENTS" for "OLAPSYS"."ALL$OLAP_FUNCTION_ARGUMENTS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FUNCTION_PARAMETERS" for "OLAPSYS"."ALL$OLAP_FUNCTION_PARAMETERS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FUNCTION_USAGES" for "OLAPSYS"."ALL$OLAP_FUNCTION_USAGES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_FUNCTIONS" for "OLAPSYS"."ALL$OLAP_FUNCTIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_JOIN_KEY_COLUMN_USES" for "OLAPSYS"."ALL$OLAP_JOIN_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_KEY_COLUMN_USES" for "OLAPSYS"."ALL$OLAP_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_KEYS" for "OLAPSYS"."ALL$OLAP_KEYS";
CREATE  PUBLIC SYNONYM "ALL_OLAP_TABLES" for "OLAPSYS"."ALL$OLAP_TABLES";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_DIMENSIONS" for "OLAPSYS"."ALL$OLAPMR_DIMENSIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_DIM_ATTRIBUTES" for "OLAPSYS"."ALL$OLAPMR_DIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_ATTRIBUTES" for "OLAPSYS"."ALL$OLAPMR_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_DIM_LEVELS" for "OLAPSYS"."ALL$OLAPMR_DIM_LEVELS";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_MANAGER" for "OLAPSYS"."CWM2_OLAP_MANAGER";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_UTILITY" for "OLAPSYS"."CWM2_OLAP_UTILITY";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_CATALOG" for "OLAPSYS"."CWM2_OLAP_CATALOG";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_CUBE" for "OLAPSYS"."CWM2_OLAP_CUBE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_DIMENSION" for "OLAPSYS"."CWM2_OLAP_DIMENSION";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_DIMENSION_ATTRIBUTE" for "OLAPSYS"."CWM2_OLAP_DIMENSION_ATTRIBUTE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_LEVEL" for "OLAPSYS"."CWM2_OLAP_LEVEL";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_LEVEL_ATTRIBUTE" for "OLAPSYS"."CWM2_OLAP_LEVEL_ATTRIBUTE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_MEASURE" for "OLAPSYS"."CWM2_OLAP_MEASURE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_VALIDATE" for "OLAPSYS"."CWM2_OLAP_VALIDATE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_VERIFY_ACCESS" for "OLAPSYS"."CWM2_OLAP_VERIFY_ACCESS";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_DELETE" for "OLAPSYS"."CWM2_OLAP_DELETE";
CREATE  PUBLIC SYNONYM "CWM2_SECURITY" for "OLAPSYS"."CWM2$SECURITY";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_TABLE_MAP" for "OLAPSYS"."CWM2_OLAP_TABLE_MAP";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_PC_TRANSFORM" for "OLAPSYS"."CWM2_OLAP_PC_TRANSFORM";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_CLASSIFY" for "OLAPSYS"."CWM2_OLAP_CLASSIFY";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CUBE_MEASURES" for "OLAPSYS"."ALL$OLAP2UCUBE_MEASURES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CUBE_DIM_USES" for "OLAPSYS"."ALL$OLAP2UCUBE_DIM_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CUBE_MEAS_DIM_USES" for "OLAPSYS"."ALL$OLAP2UCUBE_MEAS_DIM_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIMENSIONS" for "OLAPSYS"."ALL$OLAP2UDIMENSIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_HIERARCHIES" for "OLAPSYS"."ALL$OLAP2UDIM_HIERARCHIES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_LEVELS" for "OLAPSYS"."ALL$OLAP2UDIM_LEVELS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_HIER_LEVEL_USES" for "OLAPSYS"."ALL$OLAP2UDIM_HIER_LEVEL_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_ATTRIBUTES" for "OLAPSYS"."ALL$OLAP2UDIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_ATTR_USES" for "OLAPSYS"."ALL$OLAP2UDIM_ATTR_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_LEVEL_ATTRIBUTES" for "OLAPSYS"."ALL$OLAP2UDIM_LEVEL_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CUBE_MEASURE_MAPS" for "OLAPSYS"."ALL$OLAP2UCUBE_MEASURE_MAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_FACT_LEVEL_USES" for "OLAPSYS"."ALL$OLAP2UFACT_LEVEL_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_JOIN_KEY_COLUMN_USES" for "OLAPSYS"."ALL$OLAP2UJOIN_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_LEVEL_KEY_COL_USES" for "OLAPSYS"."ALL$OLAP2ULEVEL_KEY_COL_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_LEVEL_ATTR_MAPS" for "OLAPSYS"."ALL$OLAP2UDIM_LEVEL_ATTR_MAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CATALOGS" for "OLAPSYS"."ALL$OLAP2UCATALOGS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_ENTITY_DESC_USES" for "OLAPSYS"."ALL$OLAP2UENTITY_DESC_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CATALOG_ENTITY_USES" for "OLAPSYS"."ALL$OLAP2UCATALOG_ENTITY_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_FACT_TABLE_GID" for "OLAPSYS"."ALL$OLAP2UFACT_TABLE_GID";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_HIER_CUSTOM_SORT" for "OLAPSYS"."ALL$OLAP2UHIER_CUSTOM_SORT";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_FACTTBLKEYMAPS" for "OLAPSYS"."ALL$OLAPMR_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_FACTTBLFCTMAPS" for "OLAPSYS"."ALL$OLAPMR_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_LISTDIMS" for "OLAPSYS"."ALL$OLAP2ULISTDIMS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_HIERS" for "OLAPSYS"."ALL$OLAP2UDIM_HIERS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_HIERDIMS" for "OLAPSYS"."ALL$OLAP2UHIERDIMS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_FACTTBLKEYMAPS" for "OLAPSYS"."ALL$OLAP2_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_RUFCTTBLKYMAPS" for "OLAPSYS"."ALL$OLAP2_RUFCTTBLKYMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_FACTTBLFCTMAPS" for "OLAPSYS"."ALL$OLAP2_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_HIERDIM_KEYCOL_MAP" for "OLAPSYS"."ALL$OLAP2UHIERDIM_KEYCOL_MAP";
CREATE  PUBLIC SYNONYM "ALL_OLAPMR_DIM_LEVELS_KEYMAPS" for "OLAPSYS"."ALL$OLAPMR_DIM_LEVELS_KEYMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_DIM_LEVELS_KEYMAPS" for "OLAPSYS"."ALL$OLAP2_DIM_LEVELS_KEYMAPS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_MR_MEASDIMVIEW" for "OLAPSYS"."ALL$OLAP2_MR_MEASDIMVIEW";
CREATE  PUBLIC SYNONYM "ALL_OLAP9I1_HIER_DIMENSIONS" for "OLAPSYS"."ALL$OLAP9I1_HIER_DIMENSIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAP9I2_HIER_DIMENSIONS" for "OLAPSYS"."ALL$OLAP9I2_HIER_DIMENSIONS";
CREATE  PUBLIC SYNONYM "ALL_OLAP1_CUBES" for "OLAPSYS"."ALL$OLAP1_CUBES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_AWVIEWS" for "OLAPSYS"."ALL$OLAP2_AWVIEWS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_AWVIEWCOLS" for "OLAPSYS"."ALL$OLAP2_AWVIEWCOLS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_ENTITY_PARAMETERS" for "OLAPSYS"."ALL$OLAP2UENTITY_PARAMETERS";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_ENTITY_EXT_PARMS" for "OLAPSYS"."ALL$OLAP2UENTITY_EXT_PARMS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CUBES" for "OLAPSYS"."DBA$OLAP2UCUBES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CUBE_MEASURES" for "OLAPSYS"."DBA$OLAP2UCUBE_MEASURES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CUBE_DIM_USES" for "OLAPSYS"."DBA$OLAP2UCUBE_DIM_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CUBE_MEAS_DIM_USES" for "OLAPSYS"."DBA$OLAP2UCUBE_MEAS_DIM_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIMENSIONS" for "OLAPSYS"."DBA$OLAP2UDIMENSIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_HIERARCHIES" for "OLAPSYS"."DBA$OLAP2UDIM_HIERARCHIES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_LEVELS" for "OLAPSYS"."DBA$OLAP2UDIM_LEVELS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_HIER_LEVEL_USES" for "OLAPSYS"."DBA$OLAP2UDIM_HIER_LEVEL_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_ATTRIBUTES" for "OLAPSYS"."DBA$OLAP2UDIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_ATTR_USES" for "OLAPSYS"."DBA$OLAP2UDIM_ATTR_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_LEVEL_ATTRIBUTES" for "OLAPSYS"."DBA$OLAP2UDIM_LEVEL_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_FACT_LEVEL_USES" for "OLAPSYS"."DBA$OLAP2UFACT_LEVEL_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_JOIN_KEY_COLUMN_USES" for "OLAPSYS"."DBA$OLAP2UJOIN_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_LEVEL_KEY_COL_USES" for "OLAPSYS"."DBA$OLAP2ULEVEL_KEY_COL_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_LEVEL_ATTR_MAPS" for "OLAPSYS"."DBA$OLAP2UDIM_LEVEL_ATTR_MAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CATALOGS" for "OLAPSYS"."DBA$OLAP2UCATALOGS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_ENTITY_DESC_USES" for "OLAPSYS"."DBA$OLAP2UENTITY_DESC_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CATALOG_ENTITY_USES" for "OLAPSYS"."DBA$OLAP2UCATALOG_ENTITY_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_FACT_TABLE_GID" for "OLAPSYS"."DBA$OLAP2UFACT_TABLE_GID";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_HIER_CUSTOM_SORT" for "OLAPSYS"."DBA$OLAP2UHIER_CUSTOM_SORT";
CREATE  PUBLIC SYNONYM "DBA_OLAPMR_FACTTBLKEYMAPS" for "OLAPSYS"."DBA$OLAPMR_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAPMR_FACTTBLFCTMAPS" for "OLAPSYS"."DBA$OLAPMR_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_LISTDIMS" for "OLAPSYS"."DBA$OLAP2ULISTDIMS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_HIERDIMS" for "OLAPSYS"."DBA$OLAP2UHIERDIMS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_FACTTBLKEYMAPS" for "OLAPSYS"."DBA$OLAP2_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_RUFCTTBLKYMAPS" for "OLAPSYS"."DBA$OLAP2_RUFCTTBLKYMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_FACTTBLFCTMAPS" for "OLAPSYS"."DBA$OLAP2_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_HIERDIM_KEYCOL_MAP" for "OLAPSYS"."DBA$OLAP2UHIERDIM_KEYCOL_MAP";
CREATE  PUBLIC SYNONYM "DBA_OLAPMR_DIM_LEVELS_KEYMAPS" for "OLAPSYS"."DBA$OLAPMR_DIM_LEVELS_KEYMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_LEVELS_KEYMAPS" for "OLAPSYS"."DBA$OLAP2_DIM_LEVELS_KEYMAPS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_MR_MEASDIMVIEW" for "OLAPSYS"."DBA$OLAP2_MR_MEASDIMVIEW";
CREATE  PUBLIC SYNONYM "DBA_OLAP9I1_HIER_DIMENSIONS" for "OLAPSYS"."DBA$OLAP9I1_HIER_DIMENSIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP9I2_HIER_DIMENSIONS" for "OLAPSYS"."DBA$OLAP9I2_HIER_DIMENSIONS";
CREATE  PUBLIC SYNONYM "DBA_OLAP1_CUBES" for "OLAPSYS"."DBA$OLAP1_CUBES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_AWVIEWS" for "OLAPSYS"."DBA$OLAP2_AWVIEWS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_AWVIEWCOLS" for "OLAPSYS"."DBA$OLAP2_AWVIEWCOLS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_AGGREGATION_USES" for "OLAPSYS"."DBA$OLAP2_AGGREGATION_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_ENTITY_PARAMETERS" for "OLAPSYS"."DBA$OLAP2UENTITY_PARAMETERS";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_ENTITY_EXT_PARMS" for "OLAPSYS"."DBA$OLAP2UENTITY_EXT_PARMS";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_DIMENSIONS" for "OLAPSYS"."ALL$AW_LOAD_DIM";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_DIM_FILTERS" for "OLAPSYS"."ALL$AW_LOAD_DIM_FILT";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_CUBE_FILTERS" for "OLAPSYS"."ALL$AW_LOAD_CUBE_FILT";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_DIM_PARMS" for "OLAPSYS"."ALL$AW_LOAD_DIM_PARM";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_CUBES" for "OLAPSYS"."ALL$AW_LOAD_CUBES";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_CUBE_PARMS" for "OLAPSYS"."ALL$AW_LOAD_CUBE_PARM";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_MV_CUBE_AGG_MEASURES" for "OLAPSYS"."ALL$AW_LOAD_CUBE_AGG_MEASURES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_MV_CUBE_AGG_LEVELS" for "OLAPSYS"."ALL$AW_LOAD_CUBE_AGG_LEVELS";
CREATE  PUBLIC SYNONYM "ALL_LOAD_CUBE_SEGWIDTH" for "OLAPSYS"."ALL$AW_LOAD_CUBE_SEGWIDTH";
CREATE  PUBLIC SYNONYM "ALL_AW_CUBE_AGG_PLANS" for "OLAPSYS"."ALL$AW_CUBE_AGG_PLANS";
CREATE  PUBLIC SYNONYM "ALL_AW_CUBE_AGG_MEASURES" for "OLAPSYS"."ALL$AW_CUBE_AGG_MEASURES";
CREATE  PUBLIC SYNONYM "ALL_AW_CUBE_AGG_LEVELS" for "OLAPSYS"."ALL$AW_CUBE_AGG_LEVELS";
CREATE  PUBLIC SYNONYM "MRV_OLAP1_POP_DIMENSIONS" for "OLAPSYS"."MRV$OLAP1_POP_DIMENSIONS";
CREATE  PUBLIC SYNONYM "MRV_OLAP1_POP_CUBES" for "OLAPSYS"."MRV$OLAP1_POP_CUBES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_POP_DIMENSIONS" for "OLAPSYS"."MRV$OLAP2_POP_DIMENSIONS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_POP_CUBES" for "OLAPSYS"."MRV$OLAP2_POP_CUBES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AWVIEWS" for "OLAPSYS"."MRV$OLAP2_AWVIEWS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AWVIEWCOLS" for "OLAPSYS"."MRV$OLAP2_AWVIEWCOLS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_CATALOGS" for "OLAPSYS"."MRV$OLAP2_CATALOGS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_CATALOG_ENTITY_USES" for "OLAPSYS"."MRV$OLAP2_CATALOG_ENTITY_USES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_LISTDIMS_CC" for "OLAPSYS"."MRV$OLAP2_LISTDIMS_CC";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_LISTDIMS" for "OLAPSYS"."MRV$OLAP2_LISTDIMS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_DIM_HIERS" for "OLAPSYS"."MRV$OLAP2_DIM_HIERS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_HIERDIMS_CC" for "OLAPSYS"."MRV$OLAP2_HIERDIMS_CC";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_HIERDIMS" for "OLAPSYS"."MRV$OLAP2_HIERDIMS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_DIM_HIER_LEVEL_USES" for "OLAPSYS"."MRV$OLAP2_DIM_HIER_LEVEL_USES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_JOIN_KEY_COL_USES" for "OLAPSYS"."MRV$OLAP2_JOIN_KEY_COL_USES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_DIM_ATTRIBUTES" for "OLAPSYS"."MRV$OLAP2_DIM_ATTRIBUTES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_ENTITY_DESC_USES" for "OLAPSYS"."MRV$OLAP2_ENTITY_DESC_USES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_DESCRIPTORS" for "OLAPSYS"."MRV$OLAP2_DESCRIPTORS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_DIM_LEVEL_ATTR_MAPS" for "OLAPSYS"."MRV$OLAP2_DIM_LEVEL_ATTR_MAPS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_CUBE_MEASURES" for "OLAPSYS"."MRV$OLAP2_CUBE_MEASURES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_FACTTBLKEYMAPS" for "OLAPSYS"."MRV$OLAP2_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "MRV_OLAP1_FACTTBLKEYMAPS" for "OLAPSYS"."MRV$OLAP1_FACTTBLKEYMAPS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_FACTTBLFCTMAPS" for "OLAPSYS"."MRV$OLAP2_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "MRV_OLAP1_FACTTBLFCTMAPS" for "OLAPSYS"."MRV$OLAP1_FACTTBLFCTMAPS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_HIERDIM_KEYCOL_MAP" for "OLAPSYS"."MRV$OLAP2_HIERDIM_KEYCOL_MAP";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_HIER_CUSTOM_SORT" for "OLAPSYS"."MRV$OLAP2_HIER_CUSTOM_SORT";
CREATE  PUBLIC SYNONYM "MRV_OLAP_CWM1_AGGOP" for "OLAPSYS"."MRV$MRALL_CWM1_AGGOP";
CREATE  PUBLIC SYNONYM "MRV_OLAP_CWM1_AGGORD" for "OLAPSYS"."MRV$MRALL_CWM1_AGGORD";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AGGREGATION_USES" for "OLAPSYS"."MRV$OLAP2_AGG_USES";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_ENTITY_PARAMETERS" for "OLAPSYS"."MRV$MRALL_ENTITY_PARAMETERS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_ENTITY_EXT_PARMS" for "OLAPSYS"."MRV$MRALL_ENTITY_EXT_PARMS";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AWS" for "OLAPSYS"."MRAC_OLAP2_AWS_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_MAP_DIM_USE" for "OLAPSYS"."MRAC_OLAP2_AW_MAP_DIM_USE_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_PHYS_OBJ" for "OLAPSYS"."MRAC_OLAP2_AW_PHYS_OBJ_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_PHYS_OBJ_PROP" for "OLAPSYS"."MRAC_OLAP2_AW_PHYS_OBJ_PROP_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_MAP_MEAS_USE" for "OLAPSYS"."MRAC_OLAP2_AW_MAP_MEAS_USE_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_MAP_ATTR_USE" for "OLAPSYS"."MRAC_OLAP2_AW_MAP_ATTR_USE_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_DIMENSIONS" for "OLAPSYS"."MRAC_OLAP2_AW_DIMENSIONS_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_ATTRIBUTES" for "OLAPSYS"."MRAC_OLAP2_AW_ATTRIBUTES_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBES" for "OLAPSYS"."MRAC_OLAP2_AW_CUBES_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_DIM_USES" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_DIM_USES_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_DIM_LEVELS" for "OLAPSYS"."MRAC_OLAP2_AW_DIM_LEVELS_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_MEASURES" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_MEASURES_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_AGG_SPECS" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_AGG_SPECS_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_AGG_MEAS" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_AGG_MEAS_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_AGG_LVL" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_AGG_LVL_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_CUBE_AGG_OP" for "OLAPSYS"."MRAC_OLAP2_AW_CUBE_AGG_OP_V";
CREATE  PUBLIC SYNONYM "MRV_OLAP2_AW_DIM_HIER_LVL_ORD" for "OLAPSYS"."MRAC_OLAP2_AW_HIER_LVL_ORD_V";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_MR_SECURITY_INIT" for "OLAPSYS"."CWM2_OLAP_MR_SECURITY_INIT";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_MR_SESSION_POP" for "OLAPSYS"."CWM2_OLAP_MR_SESSION_POP";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_MR_CHECK_PRIVS" for "OLAPSYS"."CWM2_OLAP_MR_CHECK_PRIVS";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_METADATA_REFRESH" for "OLAPSYS"."CWM2_OLAP_METADATA_REFRESH";
CREATE  PUBLIC SYNONYM "OLAPFACTVIEW" for "OLAPSYS"."OLAPFACTVIEW";
CREATE  PUBLIC SYNONYM "OLAPDIMVIEW" for "OLAPSYS"."OLAPDIMVIEW";
CREATE  PUBLIC SYNONYM "DBMS_ODM" for "OLAPSYS"."DBMS_ODM";
CREATE  PUBLIC SYNONYM "OLAP_SYS_AW_ACCESS_CUBE_VIEW" for "OLAPSYS"."OLAP_SYS_AW_ACCESS_CUBE_VIEW";
CREATE  PUBLIC SYNONYM "OLAP_SYS_AW_ACCESS_DIM_VIEW" for "OLAPSYS"."OLAP_SYS_AW_ACCESS_DIM_VIEW";
CREATE  PUBLIC SYNONYM "OLAP_SYS_AW_ENABLE_ACCESS_VIEW" for "OLAPSYS"."OLAP_SYS_AW_ENABLE_ACCESS_VIEW";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_OLAPAPI_ENABLE" for "OLAPSYS"."CWM2_OLAP_OLAPAPI_ENABLE";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_AW_AWUTIL" for "OLAPSYS"."CWM2_OLAP_AW_AWUTIL";
CREATE  PUBLIC SYNONYM "DBMS_AW_UTILITIES" for "OLAPSYS"."DBMS_AW_UTILITIES";
CREATE  PUBLIC SYNONYM "DBMS_AWM" for "OLAPSYS"."DBMS_AWM";
CREATE  PUBLIC SYNONYM "DBMS_SHARED_POOL" for "SYS"."DBMS_SHARED_POOL";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_EXCEPTIONS" for "OLAPSYS"."CWM2_OLAP_EXCEPTIONS";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_HIERARCHY" for "OLAPSYS"."CWM2_OLAP_HIERARCHY";
CREATE  PUBLIC SYNONYM "CWM2_OLAP_EXPORT" for "OLAPSYS"."CWM2_OLAP_EXPORT";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_CUBE_MEASURE_MAPS" for "OLAPSYS"."DBA$OLAP2UCUBE_MEASURE_MAPS";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_CUBE_DIMS" for "OLAPSYS"."ALL$AW_LOAD_CUBE_DIMS";
CREATE  PUBLIC SYNONYM "DBA_OLAP_DIM_ATTR_USES" for "OLAPSYS"."DBA$OLAP_DIM_ATTR_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP_LEVEL_KEY_COLUMN_USES" for "OLAPSYS"."ALL$OLAP_LEVEL_KEY_COLUMN_USES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_CUBES" for "OLAPSYS"."ALL$OLAP2UCUBES";
CREATE  PUBLIC SYNONYM "ALL_OLAP2_AGGREGATION_USES" for "OLAPSYS"."ALL$OLAP2_AGGREGATION_USES";
CREATE  PUBLIC SYNONYM "DBA_OLAP2_DIM_HIERS" for "OLAPSYS"."DBA$OLAP2UDIM_HIERS";
CREATE  PUBLIC SYNONYM "ALL_AW_LOAD_CUBE_MEASURES" for "OLAPSYS"."ALL$AW_LOAD_CUBE_MEAS";
CREATE  PUBLIC SYNONYM "DBA_DV_COMMAND_RULE_ID" for "DVSYS"."DBA_DV_COMMAND_RULE_ID";
CREATE  PUBLIC SYNONYM "DBA_DV_DIAGNOSTIC_AUTH" for "DVSYS"."DBA_DV_DIAGNOSTIC_AUTH";
CREATE  PUBLIC SYNONYM "DBA_DV_MAINTENANCE_AUTH" for "DVSYS"."DBA_DV_MAINTENANCE_AUTH";
CREATE  PUBLIC SYNONYM "DBA_DV_POLICY" for "DVSYS"."DBA_DV_POLICY";
CREATE  PUBLIC SYNONYM "DBA_DV_POLICY_OBJECT" for "DVSYS"."DBA_DV_POLICY_OBJECT";
CREATE  PUBLIC SYNONYM "DBA_DV_POLICY_OWNER" for "DVSYS"."DBA_DV_POLICY_OWNER";
CREATE  PUBLIC SYNONYM "DBA_DV_PREPROCESSOR_AUTH" for "DVSYS"."DBA_DV_PREPROCESSOR_AUTH";
CREATE  PUBLIC SYNONYM "DBA_DV_TRAINING_LOG" for "DVSYS"."DBA_DV_TRAINING_LOG";
CREATE  PUBLIC SYNONYM "DBA_DV_TTS_AUTH" for "DVSYS"."DBA_DV_TTS_AUTH";
CREATE  PUBLIC SYNONYM "CONFIGURE_DV" for "SYS"."CONFIGURE_DV";
CREATE  PUBLIC SYNONYM "CDB_DV_STATUS" for "SYS"."CDB_DV_STATUS";
CREATE  PUBLIC SYNONYM "UTL_MAIL" for "SYS"."UTL_MAIL";

